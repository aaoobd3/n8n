[
	{
		"label": "os",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "os",
		"description": "os",
		"detail": "os",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "asdict",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "dataclass",
		"importPath": "dataclasses",
		"description": "dataclasses",
		"isExtraImport": true,
		"detail": "dataclasses",
		"documentation": {}
	},
	{
		"label": "DEFAULT_HEALTH_CHECK_SERVER_HOST",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_HEALTH_CHECK_SERVER_PORT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_ENABLED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_HOST",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_PORT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_DEPLOYMENT_NAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_ENVIRONMENT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_N8N_VERSION",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_SENTRY_DSN",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BUILTINS_DENY_DEFAULT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_MAX_CONCURRENCY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_MAX_PAYLOAD_SIZE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_TASK_BROKER_URI",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_TASK_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_AUTO_SHUTDOWN_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_SHUTDOWN_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_BUILTINS_DENY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_EXTERNAL_ALLOW",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRANT_TOKEN",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_MAX_CONCURRENCY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_MAX_PAYLOAD_SIZE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_STDLIB_ALLOW",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_BROKER_URI",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_AUTO_SHUTDOWN_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRACEFUL_SHUTDOWN_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_INFO_REQUEST",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RUNNER_REGISTERED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_CANCEL",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_OFFER_ACCEPT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_SETTINGS",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RPC_RESPONSE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_INFO",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_ACCEPTED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_DONE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_ERROR",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_OFFER",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_REJECTED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_FORMAT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TIMESTAMP_FORMAT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_WINDOWS_NOT_SUPPORTED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_INFO_REQUEST",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RUNNER_REGISTERED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_CANCEL",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_OFFER_ACCEPT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_SETTINGS",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RPC_RESPONSE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_FILENAMES",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "IGNORED_ERROR_TYPES",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_SENTRY_MISSING",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_KEY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_VALUE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "MAX_VALIDATION_CACHE_SIZE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_RELATIVE_IMPORT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_STDLIB_DISALLOWED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_EXTERNAL_DISALLOWED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_DANGEROUS_ATTRIBUTE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_DYNAMIC_IMPORT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ALWAYS_BLOCKED_ATTRIBUTES",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "UNSAFE_ATTRIBUTES",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_CIRCULAR_REFERENCE_KEY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_USER_OUTPUT_KEY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_ALL_ITEMS_FILENAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_PER_ITEM_FILENAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "SIGTERM_EXIT_CODE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_NAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_REJECTED_REASON_AT_CAPACITY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_REJECTED_REASON_OFFER_EXPIRED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_TYPE_PYTHON",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_INTERVAL",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY_MAX_JITTER",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY_LATENCY_BUFFER",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_BROKER_WS_PATH",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "RPC_BROWSER_CONSOLE_LOG_METHOD",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_COMPLETE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL_UNKNOWN",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL_WAITING",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRACEFUL_SHUTDOWN_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRANT_TOKEN",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_ENABLED",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_PORT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_BROKER_URI",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_TIMEOUT",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_ALL_ITEMS_FILENAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_PER_ITEM_FILENAME",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "IGNORED_ERROR_TYPES",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_SENTRY_MISSING",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_KEY",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_VALUE",
		"importPath": "src.constants",
		"description": "src.constants",
		"isExtraImport": true,
		"detail": "src.constants",
		"documentation": {}
	},
	{
		"label": "Set",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Dict",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Literal",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Union",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "List",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Dict",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "List",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Literal",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Union",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Dict",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "cast",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "TYPE_CHECKING",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Set",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Tuple",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Set",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Dict",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Callable",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Awaitable",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Optional",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Any",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "TaskCancelledError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskRuntimeError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "SecurityViolationError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "SecurityViolationError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskCancelledError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskResultMissingError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskRuntimeError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskTimeoutError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskProcessExitError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskCancelledError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "NoIdleTimeoutHandlerError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "TaskMissingError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "WebsocketConnectionError",
		"importPath": "src.errors",
		"description": "src.errors",
		"isExtraImport": true,
		"detail": "src.errors",
		"documentation": {}
	},
	{
		"label": "asyncio",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "asyncio",
		"description": "asyncio",
		"detail": "asyncio",
		"documentation": {}
	},
	{
		"label": "errno",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "errno",
		"description": "errno",
		"detail": "errno",
		"documentation": {}
	},
	{
		"label": "logging",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "logging",
		"description": "logging",
		"detail": "logging",
		"documentation": {}
	},
	{
		"label": "HealthCheckConfig",
		"importPath": "src.config.health_check_config",
		"description": "src.config.health_check_config",
		"isExtraImport": true,
		"detail": "src.config.health_check_config",
		"documentation": {}
	},
	{
		"label": "HealthCheckConfig",
		"importPath": "src.config.health_check_config",
		"description": "src.config.health_check_config",
		"isExtraImport": true,
		"detail": "src.config.health_check_config",
		"documentation": {}
	},
	{
		"label": "sys",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "sys",
		"description": "sys",
		"detail": "sys",
		"documentation": {}
	},
	{
		"label": "platform",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "platform",
		"description": "platform",
		"detail": "platform",
		"documentation": {}
	},
	{
		"label": "SentryConfig",
		"importPath": "src.config.sentry_config",
		"description": "src.config.sentry_config",
		"isExtraImport": true,
		"detail": "src.config.sentry_config",
		"documentation": {}
	},
	{
		"label": "SentryConfig",
		"importPath": "src.config.sentry_config",
		"description": "src.config.sentry_config",
		"isExtraImport": true,
		"detail": "src.config.sentry_config",
		"documentation": {}
	},
	{
		"label": "SentryConfig",
		"importPath": "src.config.sentry_config",
		"description": "src.config.sentry_config",
		"isExtraImport": true,
		"detail": "src.config.sentry_config",
		"documentation": {}
	},
	{
		"label": "TaskRunnerConfig",
		"importPath": "src.config.task_runner_config",
		"description": "src.config.task_runner_config",
		"isExtraImport": true,
		"detail": "src.config.task_runner_config",
		"documentation": {}
	},
	{
		"label": "TaskRunnerConfig",
		"importPath": "src.config.task_runner_config",
		"description": "src.config.task_runner_config",
		"isExtraImport": true,
		"detail": "src.config.task_runner_config",
		"documentation": {}
	},
	{
		"label": "setup_logging",
		"importPath": "src.logs",
		"description": "src.logs",
		"isExtraImport": true,
		"detail": "src.logs",
		"documentation": {}
	},
	{
		"label": "TaskRunner",
		"importPath": "src.task_runner",
		"description": "src.task_runner",
		"isExtraImport": true,
		"detail": "src.task_runner",
		"documentation": {}
	},
	{
		"label": "Shutdown",
		"importPath": "src.shutdown",
		"description": "src.shutdown",
		"isExtraImport": true,
		"detail": "src.shutdown",
		"documentation": {}
	},
	{
		"label": "json",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "json",
		"description": "json",
		"detail": "json",
		"documentation": {}
	},
	{
		"label": "NodeMode",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "TaskSettings",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "NodeMode",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "Items",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "TaskSettings",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "Items",
		"importPath": "src.message_types.broker",
		"description": "src.message_types.broker",
		"isExtraImport": true,
		"detail": "src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerMessage",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerMessage",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerInfoRequest",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerRunnerRegistered",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskOfferAccept",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskSettings",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskCancel",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerRpcResponse",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerMessage",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerMessage",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerInfoRequest",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerRunnerRegistered",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskOfferAccept",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskSettings",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerTaskCancel",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "BrokerRpcResponse",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerInfo",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerTaskOffer",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerTaskAccepted",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerTaskRejected",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerTaskDone",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerTaskError",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "RunnerRpcCall",
		"importPath": "src.message_types",
		"description": "src.message_types",
		"isExtraImport": true,
		"detail": "src.message_types",
		"documentation": {}
	},
	{
		"label": "secrets",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "secrets",
		"description": "secrets",
		"detail": "secrets",
		"documentation": {}
	},
	{
		"label": "string",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "string",
		"description": "string",
		"detail": "string",
		"documentation": {}
	},
	{
		"label": "signal",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "signal",
		"description": "signal",
		"detail": "signal",
		"documentation": {}
	},
	{
		"label": "ast",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "ast",
		"description": "ast",
		"detail": "ast",
		"documentation": {}
	},
	{
		"label": "hashlib",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "hashlib",
		"description": "hashlib",
		"detail": "hashlib",
		"documentation": {}
	},
	{
		"label": "OrderedDict",
		"importPath": "collections",
		"description": "collections",
		"isExtraImport": true,
		"detail": "collections",
		"documentation": {}
	},
	{
		"label": "Counter",
		"importPath": "collections",
		"description": "collections",
		"isExtraImport": true,
		"detail": "collections",
		"documentation": {}
	},
	{
		"label": "Counter",
		"importPath": "collections",
		"description": "collections",
		"isExtraImport": true,
		"detail": "collections",
		"documentation": {}
	},
	{
		"label": "Counter",
		"importPath": "collections",
		"description": "collections",
		"isExtraImport": true,
		"detail": "collections",
		"documentation": {}
	},
	{
		"label": "Empty",
		"importPath": "queue",
		"description": "queue",
		"isExtraImport": true,
		"detail": "queue",
		"documentation": {}
	},
	{
		"label": "multiprocessing",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "multiprocessing",
		"description": "multiprocessing",
		"detail": "multiprocessing",
		"documentation": {}
	},
	{
		"label": "traceback",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "traceback",
		"description": "traceback",
		"detail": "traceback",
		"documentation": {}
	},
	{
		"label": "textwrap",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "textwrap",
		"description": "textwrap",
		"detail": "textwrap",
		"documentation": {}
	},
	{
		"label": "tempfile",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "tempfile",
		"description": "tempfile",
		"detail": "tempfile",
		"documentation": {}
	},
	{
		"label": "ForkServerProcess",
		"importPath": "multiprocessing.context",
		"description": "multiprocessing.context",
		"isExtraImport": true,
		"detail": "multiprocessing.context",
		"documentation": {}
	},
	{
		"label": "ForkServerProcess",
		"importPath": "multiprocessing.context",
		"description": "multiprocessing.context",
		"isExtraImport": true,
		"detail": "multiprocessing.context",
		"documentation": {}
	},
	{
		"label": "time",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "time",
		"description": "time",
		"detail": "time",
		"documentation": {}
	},
	{
		"label": "urlparse",
		"importPath": "urllib.parse",
		"description": "urllib.parse",
		"isExtraImport": true,
		"detail": "urllib.parse",
		"documentation": {}
	},
	{
		"label": "websockets",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "websockets",
		"description": "websockets",
		"detail": "websockets",
		"documentation": {}
	},
	{
		"label": "random",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "random",
		"description": "random",
		"detail": "random",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"importPath": "src.nanoid",
		"description": "src.nanoid",
		"isExtraImport": true,
		"detail": "src.nanoid",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"importPath": "src.nanoid",
		"description": "src.nanoid",
		"isExtraImport": true,
		"detail": "src.nanoid",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"importPath": "src.nanoid",
		"description": "src.nanoid",
		"isExtraImport": true,
		"detail": "src.nanoid",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"importPath": "src.nanoid",
		"description": "src.nanoid",
		"isExtraImport": true,
		"detail": "src.nanoid",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"importPath": "src.nanoid",
		"description": "src.nanoid",
		"isExtraImport": true,
		"detail": "src.nanoid",
		"documentation": {}
	},
	{
		"label": "MessageSerde",
		"importPath": "src.message_serde",
		"description": "src.message_serde",
		"isExtraImport": true,
		"detail": "src.message_serde",
		"documentation": {}
	},
	{
		"label": "NODE_MODE_MAP",
		"importPath": "src.message_serde",
		"description": "src.message_serde",
		"isExtraImport": true,
		"detail": "src.message_serde",
		"documentation": {}
	},
	{
		"label": "TaskState",
		"importPath": "src.task_state",
		"description": "src.task_state",
		"isExtraImport": true,
		"detail": "src.task_state",
		"documentation": {}
	},
	{
		"label": "TaskStatus",
		"importPath": "src.task_state",
		"description": "src.task_state",
		"isExtraImport": true,
		"detail": "src.task_state",
		"documentation": {}
	},
	{
		"label": "TaskExecutor",
		"importPath": "src.task_executor",
		"description": "src.task_executor",
		"isExtraImport": true,
		"detail": "src.task_executor",
		"documentation": {}
	},
	{
		"label": "TaskAnalyzer",
		"importPath": "src.task_analyzer",
		"description": "src.task_analyzer",
		"isExtraImport": true,
		"detail": "src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "TaskAnalyzer",
		"importPath": "src.task_analyzer",
		"description": "src.task_analyzer",
		"isExtraImport": true,
		"detail": "src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "Enum",
		"importPath": "enum",
		"description": "enum",
		"isExtraImport": true,
		"detail": "enum",
		"documentation": {}
	},
	{
		"label": "Callable",
		"importPath": "collections.abc",
		"description": "collections.abc",
		"isExtraImport": true,
		"detail": "collections.abc",
		"documentation": {}
	},
	{
		"label": "aiohttp",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "aiohttp",
		"description": "aiohttp",
		"detail": "aiohttp",
		"documentation": {}
	},
	{
		"label": "web",
		"importPath": "aiohttp",
		"description": "aiohttp",
		"isExtraImport": true,
		"detail": "aiohttp",
		"documentation": {}
	},
	{
		"label": "web_ws",
		"importPath": "aiohttp",
		"description": "aiohttp",
		"isExtraImport": true,
		"detail": "aiohttp",
		"documentation": {}
	},
	{
		"label": "TASK_RESPONSE_WAIT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_PORT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_WS_PATH",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "GRACEFUL_SHUTDOWN_TIMEOUT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "HEALTH_CHECK_PORT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_URL",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "TASK_TIMEOUT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "TASK_RESPONSE_WAIT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "TASK_TIMEOUT",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "HEALTH_CHECK_URL",
		"importPath": "tests.fixtures.test_constants",
		"description": "tests.fixtures.test_constants",
		"isExtraImport": true,
		"detail": "tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "Path",
		"importPath": "pathlib",
		"description": "pathlib",
		"isExtraImport": true,
		"detail": "pathlib",
		"documentation": {}
	},
	{
		"label": "Path",
		"importPath": "pathlib",
		"description": "pathlib",
		"isExtraImport": true,
		"detail": "pathlib",
		"documentation": {}
	},
	{
		"label": "Path",
		"importPath": "pathlib",
		"description": "pathlib",
		"isExtraImport": true,
		"detail": "pathlib",
		"documentation": {}
	},
	{
		"label": "Path",
		"importPath": "pathlib",
		"description": "pathlib",
		"isExtraImport": true,
		"detail": "pathlib",
		"documentation": {}
	},
	{
		"label": "pytest_asyncio",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "pytest_asyncio",
		"description": "pytest_asyncio",
		"detail": "pytest_asyncio",
		"documentation": {}
	},
	{
		"label": "LocalTaskBroker",
		"importPath": "tests.fixtures.local_task_broker",
		"description": "tests.fixtures.local_task_broker",
		"isExtraImport": true,
		"detail": "tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "TaskRunnerManager",
		"importPath": "tests.fixtures.task_runner_manager",
		"description": "tests.fixtures.task_runner_manager",
		"isExtraImport": true,
		"detail": "tests.fixtures.task_runner_manager",
		"documentation": {}
	},
	{
		"label": "pytest",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "pytest",
		"description": "pytest",
		"detail": "pytest",
		"documentation": {}
	},
	{
		"label": "create_task_settings",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "wait_for_task_done",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "wait_for_task_error",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "create_task_settings",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "create_task_settings",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "get_browser_console_msgs",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "wait_for_task_done",
		"importPath": "tests.integration.conftest",
		"description": "tests.integration.conftest",
		"isExtraImport": true,
		"detail": "tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "Mock",
		"importPath": "unittest.mock",
		"description": "unittest.mock",
		"isExtraImport": true,
		"detail": "unittest.mock",
		"documentation": {}
	},
	{
		"label": "patch",
		"importPath": "unittest.mock",
		"description": "unittest.mock",
		"isExtraImport": true,
		"detail": "unittest.mock",
		"documentation": {}
	},
	{
		"label": "TaskRunnerSentry",
		"importPath": "src.sentry",
		"description": "src.sentry",
		"isExtraImport": true,
		"detail": "src.sentry",
		"documentation": {}
	},
	{
		"label": "setup_sentry",
		"importPath": "src.sentry",
		"description": "src.sentry",
		"isExtraImport": true,
		"detail": "src.sentry",
		"documentation": {}
	},
	{
		"label": "SecurityViolationError",
		"importPath": "src.errors.security_violation_error",
		"description": "src.errors.security_violation_error",
		"isExtraImport": true,
		"detail": "src.errors.security_violation_error",
		"documentation": {}
	},
	{
		"label": "argparse",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "argparse",
		"description": "argparse",
		"detail": "argparse",
		"documentation": {}
	},
	{
		"label": "subprocess",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "subprocess",
		"description": "subprocess",
		"detail": "subprocess",
		"documentation": {}
	},
	{
		"label": "HealthCheckConfig",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.config.health_check_config",
		"description": "@n8n.task-runner-python.src.config.health_check_config",
		"peekOfCode": "class HealthCheckConfig:\n    enabled: bool\n    host: str\n    port: int\n    @classmethod\n    def from_env(cls):\n        port_str = os.getenv(\n            ENV_HEALTH_CHECK_SERVER_PORT, str(DEFAULT_HEALTH_CHECK_SERVER_PORT)\n        )\n        port = int(port_str)",
		"detail": "@n8n.task-runner-python.src.config.health_check_config",
		"documentation": {}
	},
	{
		"label": "SentryConfig",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.config.sentry_config",
		"description": "@n8n.task-runner-python.src.config.sentry_config",
		"peekOfCode": "class SentryConfig:\n    dsn: str\n    n8n_version: str\n    environment: str\n    deployment_name: str\n    @property\n    def enabled(self) -> bool:\n        return bool(self.dsn)\n    @classmethod\n    def from_env(cls):",
		"detail": "@n8n.task-runner-python.src.config.sentry_config",
		"documentation": {}
	},
	{
		"label": "TaskRunnerConfig",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.config.task_runner_config",
		"description": "@n8n.task-runner-python.src.config.task_runner_config",
		"peekOfCode": "class TaskRunnerConfig:\n    grant_token: str\n    task_broker_uri: str\n    max_concurrency: int\n    max_payload_size: int\n    task_timeout: int\n    auto_shutdown_timeout: int\n    graceful_shutdown_timeout: int\n    stdlib_allow: Set[str]\n    external_allow: Set[str]",
		"detail": "@n8n.task-runner-python.src.config.task_runner_config",
		"documentation": {}
	},
	{
		"label": "parse_allowlist",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.src.config.task_runner_config",
		"description": "@n8n.task-runner-python.src.config.task_runner_config",
		"peekOfCode": "def parse_allowlist(allowlist_str: str, list_name: str) -> Set[str]:\n    if not allowlist_str:\n        return set()\n    modules = {\n        module\n        for raw_module in allowlist_str.split(\",\")\n        if (module := raw_module.strip())\n    }\n    if \"*\" in modules and len(modules) > 1:\n        raise ValueError(",
		"detail": "@n8n.task-runner-python.src.config.task_runner_config",
		"documentation": {}
	},
	{
		"label": "NoIdleTimeoutHandlerError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.no_idle_timeout_handler_error",
		"description": "@n8n.task-runner-python.src.errors.no_idle_timeout_handler_error",
		"peekOfCode": "class NoIdleTimeoutHandlerError(Exception):\n    \"\"\"Raised when idle timeout is reached but no shutdown handler is configured.\"\"\"\n    def __init__(self, timeout: int):\n        super().__init__(\n            f\"Idle timeout is configured ({timeout}s) but no handler is set. \"\n            \"Set task_runner.on_idle_timeout before calling task_runner.start(). \"\n            \"This is an internal error.\"\n        )",
		"detail": "@n8n.task-runner-python.src.errors.no_idle_timeout_handler_error",
		"documentation": {}
	},
	{
		"label": "SecurityViolationError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.security_violation_error",
		"description": "@n8n.task-runner-python.src.errors.security_violation_error",
		"peekOfCode": "class SecurityViolationError(Exception):\n    \"\"\"Raised when code violates security policies, typically through the use of disallowed modules or builtins.\"\"\"\n    def __init__(\n        self, message: str = \"Security violations detected\", description: str = \"\"\n    ):\n        super().__init__(message)\n        self.message = message\n        self.description = description",
		"detail": "@n8n.task-runner-python.src.errors.security_violation_error",
		"documentation": {}
	},
	{
		"label": "TaskCancelledError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_cancelled_error",
		"description": "@n8n.task-runner-python.src.errors.task_cancelled_error",
		"peekOfCode": "class TaskCancelledError(Exception):\n    \"\"\"Raised when a task is cancelled by broker message, by runner shutdown, etc.\"\"\"\n    def __init__(self):\n        super().__init__(\"Task was cancelled\")",
		"detail": "@n8n.task-runner-python.src.errors.task_cancelled_error",
		"documentation": {}
	},
	{
		"label": "TaskMissingError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_missing_error",
		"description": "@n8n.task-runner-python.src.errors.task_missing_error",
		"peekOfCode": "class TaskMissingError(Exception):\n    \"\"\"Raised when attempting to operate on a task that does not exist.\n    This typically indicates an internal error where the task runner\n    received a message referencing a task ID that is not currently\n    being tracked in the runner's running tasks.\n    \"\"\"\n    def __init__(self, task_id: str):\n        super().__init__(\n            f\"Failed to find task {task_id}. This is likely an internal error.\"\n        )",
		"detail": "@n8n.task-runner-python.src.errors.task_missing_error",
		"documentation": {}
	},
	{
		"label": "TaskProcessExitError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_process_exit_error",
		"description": "@n8n.task-runner-python.src.errors.task_process_exit_error",
		"peekOfCode": "class TaskProcessExitError(Exception):\n    \"\"\"Raised when a task subprocess exits with a non-zero exit code.\"\"\"\n    def __init__(self, exit_code: int):\n        super().__init__(f\"Process exited with code {exit_code}\")\n        self.exit_code = exit_code",
		"detail": "@n8n.task-runner-python.src.errors.task_process_exit_error",
		"documentation": {}
	},
	{
		"label": "TaskResultMissingError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_result_missing_error",
		"description": "@n8n.task-runner-python.src.errors.task_result_missing_error",
		"peekOfCode": "class TaskResultMissingError(Exception):\n    \"\"\"Raised when a task subprocess exits successfully but returns no result.\n    This typically indicates an internal error where the subprocess did not\n    put any data in the communication queue.\n    \"\"\"\n    def __init__(self):\n        super().__init__(\n            \"Process completed but returned no result. This is likely an internal error.\"\n        )",
		"detail": "@n8n.task-runner-python.src.errors.task_result_missing_error",
		"documentation": {}
	},
	{
		"label": "TaskRuntimeError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_runtime_error",
		"description": "@n8n.task-runner-python.src.errors.task_runtime_error",
		"peekOfCode": "class TaskRuntimeError(Exception):\n    \"\"\"Raised when user code throws an exception during task execution.\"\"\"\n    def __init__(self, error_dict: Dict[str, Any]):\n        message = error_dict[\"message\"]\n        super().__init__(message)\n        self.stack_trace = error_dict.get(\"stack\", \"\")",
		"detail": "@n8n.task-runner-python.src.errors.task_runtime_error",
		"documentation": {}
	},
	{
		"label": "TaskTimeoutError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.task_timeout_error",
		"description": "@n8n.task-runner-python.src.errors.task_timeout_error",
		"peekOfCode": "class TaskTimeoutError(Exception):\n    def __init__(self, task_timeout: int):\n        \"\"\"Raised when a task execution takes longer than the timeout limit.\"\"\"\n        message = f\"Task execution timed out after {task_timeout} {'second' if task_timeout == 1 else 'seconds'}\"\n        super().__init__(message)\n        self.task_timeout = task_timeout",
		"detail": "@n8n.task-runner-python.src.errors.task_timeout_error",
		"documentation": {}
	},
	{
		"label": "WebsocketConnectionError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.errors.websocket_connection_error",
		"description": "@n8n.task-runner-python.src.errors.websocket_connection_error",
		"peekOfCode": "class WebsocketConnectionError(ConnectionError):\n    \"\"\"Raised when the task runner fails to establish a WebSocket connection to the broker.\n    Common causes include network issues, incorrect broker URI, or the broker service being unavailable.\n    \"\"\"\n    def __init__(self, broker_uri: str):\n        super().__init__(\n            f\"Failed to connect to broker. Please check if broker is reachable at: {broker_uri}\"\n        )",
		"detail": "@n8n.task-runner-python.src.errors.websocket_connection_error",
		"documentation": {}
	},
	{
		"label": "BrokerInfoRequest",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerInfoRequest:\n    type: Literal[\"broker:inforequest\"] = BROKER_INFO_REQUEST\n@dataclass\nclass BrokerRunnerRegistered:\n    type: Literal[\"broker:runnerregistered\"] = BROKER_RUNNER_REGISTERED\n@dataclass\nclass BrokerTaskOfferAccept:\n    task_id: str\n    offer_id: str\n    type: Literal[\"broker:taskofferaccept\"] = BROKER_TASK_OFFER_ACCEPT",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerRunnerRegistered",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerRunnerRegistered:\n    type: Literal[\"broker:runnerregistered\"] = BROKER_RUNNER_REGISTERED\n@dataclass\nclass BrokerTaskOfferAccept:\n    task_id: str\n    offer_id: str\n    type: Literal[\"broker:taskofferaccept\"] = BROKER_TASK_OFFER_ACCEPT\nNodeMode = Literal[\"all_items\", \"per_item\"]\nItems = List[Dict[str, Any]]  # INodeExecutionData[]\n@dataclass",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerTaskOfferAccept",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerTaskOfferAccept:\n    task_id: str\n    offer_id: str\n    type: Literal[\"broker:taskofferaccept\"] = BROKER_TASK_OFFER_ACCEPT\nNodeMode = Literal[\"all_items\", \"per_item\"]\nItems = List[Dict[str, Any]]  # INodeExecutionData[]\n@dataclass\nclass TaskSettings:\n    code: str\n    node_mode: NodeMode",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "TaskSettings",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class TaskSettings:\n    code: str\n    node_mode: NodeMode\n    continue_on_fail: bool\n    items: Items\n    workflow_name: str\n    workflow_id: str\n    node_name: str\n    node_id: str\n    can_log: bool",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerTaskSettings",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerTaskSettings:\n    task_id: str\n    settings: TaskSettings\n    type: Literal[\"broker:tasksettings\"] = BROKER_TASK_SETTINGS\n@dataclass\nclass BrokerTaskCancel:\n    task_id: str\n    reason: str\n    type: Literal[\"broker:taskcancel\"] = BROKER_TASK_CANCEL\n@dataclass",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerTaskCancel",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerTaskCancel:\n    task_id: str\n    reason: str\n    type: Literal[\"broker:taskcancel\"] = BROKER_TASK_CANCEL\n@dataclass\nclass BrokerRpcResponse:\n    call_id: str\n    task_id: str\n    status: str\n    type: Literal[\"broker:rpcresponse\"] = BROKER_RPC_RESPONSE",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerRpcResponse",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "class BrokerRpcResponse:\n    call_id: str\n    task_id: str\n    status: str\n    type: Literal[\"broker:rpcresponse\"] = BROKER_RPC_RESPONSE\nBrokerMessage = Union[\n    BrokerInfoRequest,\n    BrokerRunnerRegistered,\n    BrokerTaskOfferAccept,\n    BrokerTaskSettings,",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "NodeMode",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "NodeMode = Literal[\"all_items\", \"per_item\"]\nItems = List[Dict[str, Any]]  # INodeExecutionData[]\n@dataclass\nclass TaskSettings:\n    code: str\n    node_mode: NodeMode\n    continue_on_fail: bool\n    items: Items\n    workflow_name: str\n    workflow_id: str",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "Items",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "Items = List[Dict[str, Any]]  # INodeExecutionData[]\n@dataclass\nclass TaskSettings:\n    code: str\n    node_mode: NodeMode\n    continue_on_fail: bool\n    items: Items\n    workflow_name: str\n    workflow_id: str\n    node_name: str",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "BrokerMessage",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_types.broker",
		"description": "@n8n.task-runner-python.src.message_types.broker",
		"peekOfCode": "BrokerMessage = Union[\n    BrokerInfoRequest,\n    BrokerRunnerRegistered,\n    BrokerTaskOfferAccept,\n    BrokerTaskSettings,\n    BrokerTaskCancel,\n    BrokerRpcResponse,\n]",
		"detail": "@n8n.task-runner-python.src.message_types.broker",
		"documentation": {}
	},
	{
		"label": "RunnerInfo",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerInfo:\n    name: str\n    types: List[str]\n    type: Literal[\"runner:info\"] = RUNNER_INFO\n@dataclass\nclass RunnerTaskOffer:\n    offer_id: str\n    task_type: str\n    valid_for: int\n    type: Literal[\"runner:taskoffer\"] = RUNNER_TASK_OFFER",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerTaskOffer",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerTaskOffer:\n    offer_id: str\n    task_type: str\n    valid_for: int\n    type: Literal[\"runner:taskoffer\"] = RUNNER_TASK_OFFER\n@dataclass\nclass RunnerTaskAccepted:\n    task_id: str\n    type: Literal[\"runner:taskaccepted\"] = RUNNER_TASK_ACCEPTED\n@dataclass",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerTaskAccepted",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerTaskAccepted:\n    task_id: str\n    type: Literal[\"runner:taskaccepted\"] = RUNNER_TASK_ACCEPTED\n@dataclass\nclass RunnerTaskRejected:\n    task_id: str\n    reason: str\n    type: Literal[\"runner:taskrejected\"] = RUNNER_TASK_REJECTED\n@dataclass\nclass RunnerTaskDone:",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerTaskRejected",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerTaskRejected:\n    task_id: str\n    reason: str\n    type: Literal[\"runner:taskrejected\"] = RUNNER_TASK_REJECTED\n@dataclass\nclass RunnerTaskDone:\n    task_id: str\n    data: Dict[str, Any]\n    type: Literal[\"runner:taskdone\"] = RUNNER_TASK_DONE\n@dataclass",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerTaskDone",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerTaskDone:\n    task_id: str\n    data: Dict[str, Any]\n    type: Literal[\"runner:taskdone\"] = RUNNER_TASK_DONE\n@dataclass\nclass RunnerTaskError:\n    task_id: str\n    error: Dict[str, Any]\n    type: Literal[\"runner:taskerror\"] = RUNNER_TASK_ERROR\n@dataclass",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerTaskError",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerTaskError:\n    task_id: str\n    error: Dict[str, Any]\n    type: Literal[\"runner:taskerror\"] = RUNNER_TASK_ERROR\n@dataclass\nclass RunnerRpcCall:\n    call_id: str\n    task_id: str\n    name: str\n    params: List[Any]",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerRpcCall",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "class RunnerRpcCall:\n    call_id: str\n    task_id: str\n    name: str\n    params: List[Any]\n    type: Literal[\"runner:rpc\"] = RUNNER_RPC_CALL\nRunnerMessage = Union[\n    RunnerInfo,\n    RunnerTaskOffer,\n    RunnerTaskAccepted,",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "RunnerMessage",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_types.runner",
		"description": "@n8n.task-runner-python.src.message_types.runner",
		"peekOfCode": "RunnerMessage = Union[\n    RunnerInfo,\n    RunnerTaskOffer,\n    RunnerTaskAccepted,\n    RunnerTaskRejected,\n    RunnerTaskDone,\n    RunnerTaskError,\n    RunnerRpcCall,\n]",
		"detail": "@n8n.task-runner-python.src.message_types.runner",
		"documentation": {}
	},
	{
		"label": "BROKER_INFO_REQUEST",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_INFO_REQUEST = \"broker:inforequest\"\nBROKER_RUNNER_REGISTERED = \"broker:runnerregistered\"\nBROKER_TASK_OFFER_ACCEPT = \"broker:taskofferaccept\"\nBROKER_TASK_SETTINGS = \"broker:tasksettings\"\nBROKER_TASK_CANCEL = \"broker:taskcancel\"\nBROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RUNNER_REGISTERED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_RUNNER_REGISTERED = \"broker:runnerregistered\"\nBROKER_TASK_OFFER_ACCEPT = \"broker:taskofferaccept\"\nBROKER_TASK_SETTINGS = \"broker:tasksettings\"\nBROKER_TASK_CANCEL = \"broker:taskcancel\"\nBROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_OFFER_ACCEPT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_TASK_OFFER_ACCEPT = \"broker:taskofferaccept\"\nBROKER_TASK_SETTINGS = \"broker:tasksettings\"\nBROKER_TASK_CANCEL = \"broker:taskcancel\"\nBROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_SETTINGS",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_TASK_SETTINGS = \"broker:tasksettings\"\nBROKER_TASK_CANCEL = \"broker:taskcancel\"\nBROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_TASK_CANCEL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_TASK_CANCEL = \"broker:taskcancel\"\nBROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BROKER_RPC_RESPONSE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BROKER_RPC_RESPONSE = \"broker:rpcresponse\"\nRUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_INFO",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_INFO = \"runner:info\"\nRUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_OFFER",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_TASK_OFFER = \"runner:taskoffer\"\nRUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_ACCEPTED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_TASK_ACCEPTED = \"runner:taskaccepted\"\nRUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_REJECTED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_TASK_REJECTED = \"runner:taskrejected\"\nRUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_DONE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_TASK_DONE = \"runner:taskdone\"\nRUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_TASK_ERROR",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_TASK_ERROR = \"runner:taskerror\"\nRUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_RPC_CALL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_RPC_CALL = \"runner:rpc\"\n# Runner\nTASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_TYPE_PYTHON",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "TASK_TYPE_PYTHON = \"python\"\nRUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RUNNER_NAME",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RUNNER_NAME = \"Python Task Runner\"\nDEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_MAX_CONCURRENCY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_MAX_CONCURRENCY = 5  # tasks\nDEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_MAX_PAYLOAD_SIZE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_MAX_PAYLOAD_SIZE = 1024 * 1024 * 1024  # 1 GiB\nDEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_TASK_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_TASK_TIMEOUT = 60  # seconds\nDEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_AUTO_SHUTDOWN_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_AUTO_SHUTDOWN_TIMEOUT = 0  # seconds\nDEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_SHUTDOWN_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_SHUTDOWN_TIMEOUT = 10  # seconds\nOFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_INTERVAL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "OFFER_INTERVAL = 0.25  # 250ms\nOFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "OFFER_VALIDITY = 5000  # ms\nOFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY_MAX_JITTER",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "OFFER_VALIDITY_MAX_JITTER = 500  # ms\nOFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "OFFER_VALIDITY_LATENCY_BUFFER",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "OFFER_VALIDITY_LATENCY_BUFFER = 0.1  # 100ms\nMAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "MAX_VALIDATION_CACHE_SIZE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "MAX_VALIDATION_CACHE_SIZE = 500  # cached validation results\n# Executor\nEXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_USER_OUTPUT_KEY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "EXECUTOR_USER_OUTPUT_KEY = \"__n8n_internal_user_output__\"\nEXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_CIRCULAR_REFERENCE_KEY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "EXECUTOR_CIRCULAR_REFERENCE_KEY = \"__n8n_internal_circular_ref__\"\nEXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_ALL_ITEMS_FILENAME",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "EXECUTOR_ALL_ITEMS_FILENAME = \"<all_items_task_execution>\"\nEXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_PER_ITEM_FILENAME",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "EXECUTOR_PER_ITEM_FILENAME = \"<per_item_task_execution>\"\nEXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "EXECUTOR_FILENAMES",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "EXECUTOR_FILENAMES = {EXECUTOR_ALL_ITEMS_FILENAME, EXECUTOR_PER_ITEM_FILENAME}\nSIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "SIGTERM_EXIT_CODE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "SIGTERM_EXIT_CODE = -15\n# Broker\nDEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_TASK_BROKER_URI",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_TASK_BROKER_URI = \"http://127.0.0.1:5679\"\nTASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_BROKER_WS_PATH",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "TASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Health check\nDEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_HEALTH_CHECK_SERVER_HOST",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_HEALTH_CHECK_SERVER_HOST = \"127.0.0.1\"\nDEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "DEFAULT_HEALTH_CHECK_SERVER_PORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "DEFAULT_HEALTH_CHECK_SERVER_PORT = 5681\n# Env vars\nENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_BROKER_URI",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_TASK_BROKER_URI = \"N8N_RUNNERS_TASK_BROKER_URI\"\nENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRANT_TOKEN",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_GRANT_TOKEN = \"N8N_RUNNERS_GRANT_TOKEN\"\nENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_MAX_CONCURRENCY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_MAX_CONCURRENCY = \"N8N_RUNNERS_MAX_CONCURRENCY\"\nENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_MAX_PAYLOAD_SIZE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_MAX_PAYLOAD_SIZE = \"N8N_RUNNERS_MAX_PAYLOAD\"\nENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_TASK_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_TASK_TIMEOUT = \"N8N_RUNNERS_TASK_TIMEOUT\"\nENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_AUTO_SHUTDOWN_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_AUTO_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT\"\nENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_GRACEFUL_SHUTDOWN_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_GRACEFUL_SHUTDOWN_TIMEOUT = \"N8N_RUNNERS_GRACEFUL_SHUTDOWN_TIMEOUT\"\nENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_STDLIB_ALLOW",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_STDLIB_ALLOW = \"N8N_RUNNERS_STDLIB_ALLOW\"\nENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_EXTERNAL_ALLOW",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_EXTERNAL_ALLOW = \"N8N_RUNNERS_EXTERNAL_ALLOW\"\nENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_BUILTINS_DENY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_BUILTINS_DENY = \"N8N_RUNNERS_BUILTINS_DENY\"\nENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_ENABLED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_HEALTH_CHECK_SERVER_ENABLED = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_ENABLED\"\nENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_HOST",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_HEALTH_CHECK_SERVER_HOST = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_HOST\"\nENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_HEALTH_CHECK_SERVER_PORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_HEALTH_CHECK_SERVER_PORT = \"N8N_RUNNERS_HEALTH_CHECK_SERVER_PORT\"\nENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_SENTRY_DSN",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_SENTRY_DSN = \"N8N_SENTRY_DSN\"\nENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_N8N_VERSION",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_N8N_VERSION = \"N8N_VERSION\"\nENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_ENVIRONMENT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_ENVIRONMENT = \"ENVIRONMENT\"\nENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,\n    SyntaxError,",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ENV_DEPLOYMENT_NAME",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ENV_DEPLOYMENT_NAME = \"DEPLOYMENT_NAME\"\n# Sentry\nSENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,\n    SyntaxError,\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_KEY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "SENTRY_TAG_SERVER_TYPE_KEY = \"server_type\"\nSENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,\n    SyntaxError,\n)\n# Logging\nLOG_FORMAT = \"%(asctime)s.%(msecs)03d\\t%(levelname)s\\t%(message)s\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "SENTRY_TAG_SERVER_TYPE_VALUE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "SENTRY_TAG_SERVER_TYPE_VALUE = \"task_runner_python\"\nIGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,\n    SyntaxError,\n)\n# Logging\nLOG_FORMAT = \"%(asctime)s.%(msecs)03d\\t%(levelname)s\\t%(message)s\"\nLOG_TIMESTAMP_FORMAT = \"%Y-%m-%d %H:%M:%S\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "IGNORED_ERROR_TYPES",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "IGNORED_ERROR_TYPES = (\n    TaskRuntimeError,\n    TaskCancelledError,\n    SecurityViolationError,\n    SyntaxError,\n)\n# Logging\nLOG_FORMAT = \"%(asctime)s.%(msecs)03d\\t%(levelname)s\\t%(message)s\"\nLOG_TIMESTAMP_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nLOG_TASK_COMPLETE = 'Completed task {task_id} in {duration} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_FORMAT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_FORMAT = \"%(asctime)s.%(msecs)03d\\t%(levelname)s\\t%(message)s\"\nLOG_TIMESTAMP_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nLOG_TASK_COMPLETE = 'Completed task {task_id} in {duration} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL = 'Cancelled task {task_id} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL_UNKNOWN = (\n    \"Received cancel for unknown task: {task_id}. Discarding message.\"\n)\nLOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TIMESTAMP_FORMAT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_TIMESTAMP_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nLOG_TASK_COMPLETE = 'Completed task {task_id} in {duration} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL = 'Cancelled task {task_id} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL_UNKNOWN = (\n    \"Received cancel for unknown task: {task_id}. Discarding message.\"\n)\nLOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_COMPLETE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_TASK_COMPLETE = 'Completed task {task_id} in {duration} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL = 'Cancelled task {task_id} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL_UNKNOWN = (\n    \"Received cancel for unknown task: {task_id}. Discarding message.\"\n)\nLOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_TASK_CANCEL = 'Cancelled task {task_id} for node \"{node_name}\" ({node_id}) in workflow \"{workflow_name}\" ({workflow_id})'\nLOG_TASK_CANCEL_UNKNOWN = (\n    \"Received cancel for unknown task: {task_id}. Discarding message.\"\n)\nLOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons\nTASK_REJECTED_REASON_OFFER_EXPIRED = (",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL_UNKNOWN",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_TASK_CANCEL_UNKNOWN = (\n    \"Received cancel for unknown task: {task_id}. Discarding message.\"\n)\nLOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons\nTASK_REJECTED_REASON_OFFER_EXPIRED = (\n    \"Offer expired - not accepted within validity window\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_TASK_CANCEL_WAITING",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_TASK_CANCEL_WAITING = \"Cancelled task {task_id} (waiting for settings)\"\nLOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons\nTASK_REJECTED_REASON_OFFER_EXPIRED = (\n    \"Offer expired - not accepted within validity window\"\n)\nTASK_REJECTED_REASON_AT_CAPACITY = \"No open task slots - runner already at capacity\"\n# Security",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "LOG_SENTRY_MISSING",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "LOG_SENTRY_MISSING = \"Sentry is enabled but sentry-sdk is not installed. Install with: uv sync --all-extras\"\n# RPC\nRPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons\nTASK_REJECTED_REASON_OFFER_EXPIRED = (\n    \"Offer expired - not accepted within validity window\"\n)\nTASK_REJECTED_REASON_AT_CAPACITY = \"No open task slots - runner already at capacity\"\n# Security\nBUILTINS_DENY_DEFAULT = \"eval,exec,compile,open,input,breakpoint,getattr,object,type,vars,setattr,delattr,hasattr,dir,memoryview,__build_class__\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "RPC_BROWSER_CONSOLE_LOG_METHOD",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "RPC_BROWSER_CONSOLE_LOG_METHOD = \"logNodeOutput\"\n# Rejection reasons\nTASK_REJECTED_REASON_OFFER_EXPIRED = (\n    \"Offer expired - not accepted within validity window\"\n)\nTASK_REJECTED_REASON_AT_CAPACITY = \"No open task slots - runner already at capacity\"\n# Security\nBUILTINS_DENY_DEFAULT = \"eval,exec,compile,open,input,breakpoint,getattr,object,type,vars,setattr,delattr,hasattr,dir,memoryview,__build_class__\"\nALWAYS_BLOCKED_ATTRIBUTES = {\n    \"__subclasses__\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_REJECTED_REASON_OFFER_EXPIRED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "TASK_REJECTED_REASON_OFFER_EXPIRED = (\n    \"Offer expired - not accepted within validity window\"\n)\nTASK_REJECTED_REASON_AT_CAPACITY = \"No open task slots - runner already at capacity\"\n# Security\nBUILTINS_DENY_DEFAULT = \"eval,exec,compile,open,input,breakpoint,getattr,object,type,vars,setattr,delattr,hasattr,dir,memoryview,__build_class__\"\nALWAYS_BLOCKED_ATTRIBUTES = {\n    \"__subclasses__\",\n    \"__globals__\",\n    \"__builtins__\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "TASK_REJECTED_REASON_AT_CAPACITY",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "TASK_REJECTED_REASON_AT_CAPACITY = \"No open task slots - runner already at capacity\"\n# Security\nBUILTINS_DENY_DEFAULT = \"eval,exec,compile,open,input,breakpoint,getattr,object,type,vars,setattr,delattr,hasattr,dir,memoryview,__build_class__\"\nALWAYS_BLOCKED_ATTRIBUTES = {\n    \"__subclasses__\",\n    \"__globals__\",\n    \"__builtins__\",\n    \"__traceback__\",\n    \"tb_frame\",\n    \"tb_next\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "BUILTINS_DENY_DEFAULT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "BUILTINS_DENY_DEFAULT = \"eval,exec,compile,open,input,breakpoint,getattr,object,type,vars,setattr,delattr,hasattr,dir,memoryview,__build_class__\"\nALWAYS_BLOCKED_ATTRIBUTES = {\n    \"__subclasses__\",\n    \"__globals__\",\n    \"__builtins__\",\n    \"__traceback__\",\n    \"tb_frame\",\n    \"tb_next\",\n    \"f_back\",\n    \"f_globals\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ALWAYS_BLOCKED_ATTRIBUTES",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ALWAYS_BLOCKED_ATTRIBUTES = {\n    \"__subclasses__\",\n    \"__globals__\",\n    \"__builtins__\",\n    \"__traceback__\",\n    \"tb_frame\",\n    \"tb_next\",\n    \"f_back\",\n    \"f_globals\",\n    \"f_locals\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "CONDITIONALLY_BLOCKED_ATTRIBUTES",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "CONDITIONALLY_BLOCKED_ATTRIBUTES = {\n    \"__class__\",\n    \"__bases__\",\n    \"__code__\",\n    \"__closure__\",\n    \"__loader__\",\n    \"__cached__\",\n    \"__dict__\",\n    \"__import__\",\n    \"__mro__\",",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "UNSAFE_ATTRIBUTES",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "UNSAFE_ATTRIBUTES = ALWAYS_BLOCKED_ATTRIBUTES | CONDITIONALLY_BLOCKED_ATTRIBUTES\n# errors\nERROR_RELATIVE_IMPORT = \"Relative imports are disallowed.\"\nERROR_STDLIB_DISALLOWED = \"Import of standard library module '{module}' is disallowed. Allowed stdlib modules: {allowed}\"\nERROR_EXTERNAL_DISALLOWED = \"Import of external package '{module}' is disallowed. Allowed external packages: {allowed}\"\nERROR_DANGEROUS_ATTRIBUTE = \"Access to attribute '{attr}' is disallowed, because it can be used to bypass security restrictions.\"\nERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_RELATIVE_IMPORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_RELATIVE_IMPORT = \"Relative imports are disallowed.\"\nERROR_STDLIB_DISALLOWED = \"Import of standard library module '{module}' is disallowed. Allowed stdlib modules: {allowed}\"\nERROR_EXTERNAL_DISALLOWED = \"Import of external package '{module}' is disallowed. Allowed external packages: {allowed}\"\nERROR_DANGEROUS_ATTRIBUTE = \"Access to attribute '{attr}' is disallowed, because it can be used to bypass security restrictions.\"\nERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_STDLIB_DISALLOWED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_STDLIB_DISALLOWED = \"Import of standard library module '{module}' is disallowed. Allowed stdlib modules: {allowed}\"\nERROR_EXTERNAL_DISALLOWED = \"Import of external package '{module}' is disallowed. Allowed external packages: {allowed}\"\nERROR_DANGEROUS_ATTRIBUTE = \"Access to attribute '{attr}' is disallowed, because it can be used to bypass security restrictions.\"\nERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_EXTERNAL_DISALLOWED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_EXTERNAL_DISALLOWED = \"Import of external package '{module}' is disallowed. Allowed external packages: {allowed}\"\nERROR_DANGEROUS_ATTRIBUTE = \"Access to attribute '{attr}' is disallowed, because it can be used to bypass security restrictions.\"\nERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_DANGEROUS_ATTRIBUTE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_DANGEROUS_ATTRIBUTE = \"Access to attribute '{attr}' is disallowed, because it can be used to bypass security restrictions.\"\nERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_DYNAMIC_IMPORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_DYNAMIC_IMPORT = (\n    \"Dynamic __import__() calls are not allowed for security reasons.\"\n)\nERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "ERROR_WINDOWS_NOT_SUPPORTED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.constants",
		"description": "@n8n.task-runner-python.src.constants",
		"peekOfCode": "ERROR_WINDOWS_NOT_SUPPORTED = (\n    \"Error: This task runner is not supported on Windows. \"\n    \"Please use a Unix-like system (Linux or macOS).\"\n)",
		"detail": "@n8n.task-runner-python.src.constants",
		"documentation": {}
	},
	{
		"label": "HealthCheckServer",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.health_check_server",
		"description": "@n8n.task-runner-python.src.health_check_server",
		"peekOfCode": "class HealthCheckServer:\n    def __init__(self):\n        self.server: Optional[asyncio.Server] = None\n        self.logger = logging.getLogger(__name__)\n    async def start(self, config: HealthCheckConfig) -> None:\n        try:\n            self.server = await asyncio.start_server(\n                self._handle_request, config.host, config.port\n            )\n            self.logger.info(",
		"detail": "@n8n.task-runner-python.src.health_check_server",
		"documentation": {}
	},
	{
		"label": "HEALTH_CHECK_RESPONSE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.health_check_server",
		"description": "@n8n.task-runner-python.src.health_check_server",
		"peekOfCode": "HEALTH_CHECK_RESPONSE = (\n    b\"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 2\\r\\n\\r\\nOK\"\n)\nclass HealthCheckServer:\n    def __init__(self):\n        self.server: Optional[asyncio.Server] = None\n        self.logger = logging.getLogger(__name__)\n    async def start(self, config: HealthCheckConfig) -> None:\n        try:\n            self.server = await asyncio.start_server(",
		"detail": "@n8n.task-runner-python.src.health_check_server",
		"documentation": {}
	},
	{
		"label": "ColorFormatter",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.logs",
		"description": "@n8n.task-runner-python.src.logs",
		"peekOfCode": "class ColorFormatter(logging.Formatter):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.use_colors = os.getenv(\"NO_COLOR\") is None\n        # When started by launcher, log level and timestamp are handled by launcher.\n        self.short_form = not sys.stdout.isatty()\n    def format(self, record):\n        if self.short_form:\n            return record.getMessage()\n        formatted = super().format(record)",
		"detail": "@n8n.task-runner-python.src.logs",
		"documentation": {}
	},
	{
		"label": "setup_logging",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.src.logs",
		"description": "@n8n.task-runner-python.src.logs",
		"peekOfCode": "def setup_logging():\n    logger = logging.getLogger()\n    log_level_str = os.getenv(\"N8N_RUNNERS_LAUNCHER_LOG_LEVEL\", \"INFO\").upper()\n    log_level = getattr(logging, log_level_str, logging.INFO)\n    logger.setLevel(log_level)\n    stream_handler = logging.StreamHandler(sys.stdout)\n    stream_handler.setFormatter(ColorFormatter(LOG_FORMAT, LOG_TIMESTAMP_FORMAT))\n    logger.addHandler(stream_handler)\n    # Hardcoded to INFO as websocket logs are too verbose\n    logging.getLogger(\"websockets.client\").setLevel(logging.INFO)",
		"detail": "@n8n.task-runner-python.src.logs",
		"documentation": {}
	},
	{
		"label": "COLORS",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.logs",
		"description": "@n8n.task-runner-python.src.logs",
		"peekOfCode": "COLORS = {\n    \"DEBUG\": \"\\033[34m\",  # blue\n    \"INFO\": \"\\033[32m\",  # green\n    \"WARNING\": \"\\033[33m\",  # yellow\n    \"ERROR\": \"\\033[31m\",  # red\n    \"CRITICAL\": \"\\033[31m\",  # red\n}\nRESET = \"\\033[0m\"\nclass ColorFormatter(logging.Formatter):\n    def __init__(self, *args, **kwargs):",
		"detail": "@n8n.task-runner-python.src.logs",
		"documentation": {}
	},
	{
		"label": "RESET",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.logs",
		"description": "@n8n.task-runner-python.src.logs",
		"peekOfCode": "RESET = \"\\033[0m\"\nclass ColorFormatter(logging.Formatter):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.use_colors = os.getenv(\"NO_COLOR\") is None\n        # When started by launcher, log level and timestamp are handled by launcher.\n        self.short_form = not sys.stdout.isatty()\n    def format(self, record):\n        if self.short_form:\n            return record.getMessage()",
		"detail": "@n8n.task-runner-python.src.logs",
		"documentation": {}
	},
	{
		"label": "MessageSerde",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.message_serde",
		"description": "@n8n.task-runner-python.src.message_serde",
		"peekOfCode": "class MessageSerde:\n    \"\"\"Responsible for deserializing incoming messages and serializing outgoing messages.\"\"\"\n    @staticmethod\n    def deserialize_broker_message(data: str) -> BrokerMessage:\n        message_dict = json.loads(data)\n        message_type = message_dict.get(\"type\")\n        if message_type not in MESSAGE_TYPE_MAP:\n            raise ValueError(f\"Unknown message type: {message_type}\")\n        return MESSAGE_TYPE_MAP[message_type](message_dict)\n    @staticmethod",
		"detail": "@n8n.task-runner-python.src.message_serde",
		"documentation": {}
	},
	{
		"label": "NODE_MODE_MAP",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_serde",
		"description": "@n8n.task-runner-python.src.message_serde",
		"peekOfCode": "NODE_MODE_MAP = {\n    \"runOnceForAllItems\": \"all_items\",\n    \"runOnceForEachItem\": \"per_item\",\n}\ndef _get_node_mode(node_mode_str: str) -> NodeMode:\n    if node_mode_str not in NODE_MODE_MAP:\n        raise ValueError(f\"Unknown nodeMode: {node_mode_str}\")\n    return cast(NodeMode, NODE_MODE_MAP[node_mode_str])\ndef _parse_task_settings(d: dict) -> BrokerTaskSettings:\n    try:",
		"detail": "@n8n.task-runner-python.src.message_serde",
		"documentation": {}
	},
	{
		"label": "MESSAGE_TYPE_MAP",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.message_serde",
		"description": "@n8n.task-runner-python.src.message_serde",
		"peekOfCode": "MESSAGE_TYPE_MAP = {\n    BROKER_INFO_REQUEST: lambda _: BrokerInfoRequest(),\n    BROKER_RUNNER_REGISTERED: lambda _: BrokerRunnerRegistered(),\n    BROKER_TASK_OFFER_ACCEPT: _parse_task_offer_accept,\n    BROKER_TASK_SETTINGS: _parse_task_settings,\n    BROKER_TASK_CANCEL: _parse_task_cancel,\n    BROKER_RPC_RESPONSE: _parse_rpc_response,\n}\nclass MessageSerde:\n    \"\"\"Responsible for deserializing incoming messages and serializing outgoing messages.\"\"\"",
		"detail": "@n8n.task-runner-python.src.message_serde",
		"documentation": {}
	},
	{
		"label": "nanoid",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.src.nanoid",
		"description": "@n8n.task-runner-python.src.nanoid",
		"peekOfCode": "def nanoid() -> str:\n    nanoid = \"\"\n    while len(nanoid) < TARGET_NANOID_LEN:\n        index = secrets.randbits(6)\n        if index < CHARSET_LEN:\n            nanoid += NANOID_CHARSET[index]\n    return nanoid",
		"detail": "@n8n.task-runner-python.src.nanoid",
		"documentation": {}
	},
	{
		"label": "NANOID_CHARSET",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.nanoid",
		"description": "@n8n.task-runner-python.src.nanoid",
		"peekOfCode": "NANOID_CHARSET = string.ascii_uppercase + string.ascii_lowercase + string.digits\nTARGET_NANOID_LEN = 22\nCHARSET_LEN = len(NANOID_CHARSET)\n# Collision probability is roughly k^2/(2n) where k=IDs generated, n=possibilities\n# At 10^12 IDs generated with 62^22 possibilities -> ~1.8e-16 chance of collision\ndef nanoid() -> str:\n    nanoid = \"\"\n    while len(nanoid) < TARGET_NANOID_LEN:\n        index = secrets.randbits(6)\n        if index < CHARSET_LEN:",
		"detail": "@n8n.task-runner-python.src.nanoid",
		"documentation": {}
	},
	{
		"label": "TARGET_NANOID_LEN",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.nanoid",
		"description": "@n8n.task-runner-python.src.nanoid",
		"peekOfCode": "TARGET_NANOID_LEN = 22\nCHARSET_LEN = len(NANOID_CHARSET)\n# Collision probability is roughly k^2/(2n) where k=IDs generated, n=possibilities\n# At 10^12 IDs generated with 62^22 possibilities -> ~1.8e-16 chance of collision\ndef nanoid() -> str:\n    nanoid = \"\"\n    while len(nanoid) < TARGET_NANOID_LEN:\n        index = secrets.randbits(6)\n        if index < CHARSET_LEN:\n            nanoid += NANOID_CHARSET[index]",
		"detail": "@n8n.task-runner-python.src.nanoid",
		"documentation": {}
	},
	{
		"label": "CHARSET_LEN",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.nanoid",
		"description": "@n8n.task-runner-python.src.nanoid",
		"peekOfCode": "CHARSET_LEN = len(NANOID_CHARSET)\n# Collision probability is roughly k^2/(2n) where k=IDs generated, n=possibilities\n# At 10^12 IDs generated with 62^22 possibilities -> ~1.8e-16 chance of collision\ndef nanoid() -> str:\n    nanoid = \"\"\n    while len(nanoid) < TARGET_NANOID_LEN:\n        index = secrets.randbits(6)\n        if index < CHARSET_LEN:\n            nanoid += NANOID_CHARSET[index]\n    return nanoid",
		"detail": "@n8n.task-runner-python.src.nanoid",
		"documentation": {}
	},
	{
		"label": "TaskRunnerSentry",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.sentry",
		"description": "@n8n.task-runner-python.src.sentry",
		"peekOfCode": "class TaskRunnerSentry:\n    def __init__(self, config: SentryConfig):\n        self.config = config\n        self.logger = logging.getLogger(__name__)\n    def init(self) -> None:\n        import sentry_sdk\n        from sentry_sdk.integrations.logging import LoggingIntegration\n        sentry_sdk.init(\n            dsn=self.config.dsn,\n            release=f\"n8n@{self.config.n8n_version}\",",
		"detail": "@n8n.task-runner-python.src.sentry",
		"documentation": {}
	},
	{
		"label": "setup_sentry",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.src.sentry",
		"description": "@n8n.task-runner-python.src.sentry",
		"peekOfCode": "def setup_sentry(sentry_config: SentryConfig) -> Optional[TaskRunnerSentry]:\n    if not sentry_config.enabled:\n        return None\n    try:\n        sentry = TaskRunnerSentry(sentry_config)\n        sentry.init()\n        return sentry\n    except ImportError:\n        logger = logging.getLogger(__name__)\n        logger.warning(LOG_SENTRY_MISSING)",
		"detail": "@n8n.task-runner-python.src.sentry",
		"documentation": {}
	},
	{
		"label": "Shutdown",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.shutdown",
		"description": "@n8n.task-runner-python.src.shutdown",
		"peekOfCode": "class Shutdown:\n    \"\"\"Responsible for managing the shutdown routine of the task runner.\"\"\"\n    def __init__(\n        self,\n        task_runner: \"TaskRunner\",\n        health_check_server: Optional[\"HealthCheckServer\"] = None,\n        sentry: Optional[\"TaskRunnerSentry\"] = None,\n    ):\n        self.logger = logging.getLogger(__name__)\n        self.is_shutting_down = False",
		"detail": "@n8n.task-runner-python.src.shutdown",
		"documentation": {}
	},
	{
		"label": "SecurityValidator",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_analyzer",
		"description": "@n8n.task-runner-python.src.task_analyzer",
		"peekOfCode": "class SecurityValidator(ast.NodeVisitor):\n    \"\"\"AST visitor that enforces import allowlists and blocks dangerous attribute access.\"\"\"\n    def __init__(self, stdlib_allow: Set[str], external_allow: Set[str]):\n        self.checked_modules: Set[str] = set()\n        self.violations: list[str] = []\n        self.stdlib_allow = stdlib_allow\n        self.external_allow = external_allow\n        self._stdlib_allowed_str = self._format_allowed(stdlib_allow)\n        self._external_allowed_str = self._format_allowed(external_allow)\n        self._stdlib_allow_all = \"*\" in stdlib_allow",
		"detail": "@n8n.task-runner-python.src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "TaskAnalyzer",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_analyzer",
		"description": "@n8n.task-runner-python.src.task_analyzer",
		"peekOfCode": "class TaskAnalyzer:\n    _cache: ValidationCache = OrderedDict()\n    def __init__(self, stdlib_allow: Set[str], external_allow: Set[str]):\n        self._stdlib_allow = stdlib_allow\n        self._external_allow = external_allow\n        self._allowlists = (\n            tuple(sorted(stdlib_allow)),\n            tuple(sorted(external_allow)),\n        )\n        self._allow_all = \"*\" in stdlib_allow and \"*\" in external_allow",
		"detail": "@n8n.task-runner-python.src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "CacheKey",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_analyzer",
		"description": "@n8n.task-runner-python.src.task_analyzer",
		"peekOfCode": "CacheKey = Tuple[str, Tuple]  # (code_hash, allowlists_tuple)\nCachedViolations = list[str]\nValidationCache = OrderedDict[CacheKey, CachedViolations]\nclass SecurityValidator(ast.NodeVisitor):\n    \"\"\"AST visitor that enforces import allowlists and blocks dangerous attribute access.\"\"\"\n    def __init__(self, stdlib_allow: Set[str], external_allow: Set[str]):\n        self.checked_modules: Set[str] = set()\n        self.violations: list[str] = []\n        self.stdlib_allow = stdlib_allow\n        self.external_allow = external_allow",
		"detail": "@n8n.task-runner-python.src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "CachedViolations",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_analyzer",
		"description": "@n8n.task-runner-python.src.task_analyzer",
		"peekOfCode": "CachedViolations = list[str]\nValidationCache = OrderedDict[CacheKey, CachedViolations]\nclass SecurityValidator(ast.NodeVisitor):\n    \"\"\"AST visitor that enforces import allowlists and blocks dangerous attribute access.\"\"\"\n    def __init__(self, stdlib_allow: Set[str], external_allow: Set[str]):\n        self.checked_modules: Set[str] = set()\n        self.violations: list[str] = []\n        self.stdlib_allow = stdlib_allow\n        self.external_allow = external_allow\n        self._stdlib_allowed_str = self._format_allowed(stdlib_allow)",
		"detail": "@n8n.task-runner-python.src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "ValidationCache",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_analyzer",
		"description": "@n8n.task-runner-python.src.task_analyzer",
		"peekOfCode": "ValidationCache = OrderedDict[CacheKey, CachedViolations]\nclass SecurityValidator(ast.NodeVisitor):\n    \"\"\"AST visitor that enforces import allowlists and blocks dangerous attribute access.\"\"\"\n    def __init__(self, stdlib_allow: Set[str], external_allow: Set[str]):\n        self.checked_modules: Set[str] = set()\n        self.violations: list[str] = []\n        self.stdlib_allow = stdlib_allow\n        self.external_allow = external_allow\n        self._stdlib_allowed_str = self._format_allowed(stdlib_allow)\n        self._external_allowed_str = self._format_allowed(external_allow)",
		"detail": "@n8n.task-runner-python.src.task_analyzer",
		"documentation": {}
	},
	{
		"label": "TaskExecutor",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_executor",
		"description": "@n8n.task-runner-python.src.task_executor",
		"peekOfCode": "class TaskExecutor:\n    \"\"\"Responsible for executing Python code tasks in isolated subprocesses.\"\"\"\n    @staticmethod\n    def create_process(\n        code: str,\n        node_mode: NodeMode,\n        items: Items,\n        stdlib_allow: Set[str],\n        external_allow: Set[str],\n        builtins_deny: set[str],",
		"detail": "@n8n.task-runner-python.src.task_executor",
		"documentation": {}
	},
	{
		"label": "logger",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_executor",
		"description": "@n8n.task-runner-python.src.task_executor",
		"peekOfCode": "logger = logging.getLogger(__name__)\nMULTIPROCESSING_CONTEXT = multiprocessing.get_context(\"forkserver\")\nMAX_PRINT_ARGS_ALLOWED = 100\nPrintArgs = list[list[Any]]  # Args to all `print()` calls in a Python code task\nclass TaskExecutor:\n    \"\"\"Responsible for executing Python code tasks in isolated subprocesses.\"\"\"\n    @staticmethod\n    def create_process(\n        code: str,\n        node_mode: NodeMode,",
		"detail": "@n8n.task-runner-python.src.task_executor",
		"documentation": {}
	},
	{
		"label": "MULTIPROCESSING_CONTEXT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_executor",
		"description": "@n8n.task-runner-python.src.task_executor",
		"peekOfCode": "MULTIPROCESSING_CONTEXT = multiprocessing.get_context(\"forkserver\")\nMAX_PRINT_ARGS_ALLOWED = 100\nPrintArgs = list[list[Any]]  # Args to all `print()` calls in a Python code task\nclass TaskExecutor:\n    \"\"\"Responsible for executing Python code tasks in isolated subprocesses.\"\"\"\n    @staticmethod\n    def create_process(\n        code: str,\n        node_mode: NodeMode,\n        items: Items,",
		"detail": "@n8n.task-runner-python.src.task_executor",
		"documentation": {}
	},
	{
		"label": "MAX_PRINT_ARGS_ALLOWED",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_executor",
		"description": "@n8n.task-runner-python.src.task_executor",
		"peekOfCode": "MAX_PRINT_ARGS_ALLOWED = 100\nPrintArgs = list[list[Any]]  # Args to all `print()` calls in a Python code task\nclass TaskExecutor:\n    \"\"\"Responsible for executing Python code tasks in isolated subprocesses.\"\"\"\n    @staticmethod\n    def create_process(\n        code: str,\n        node_mode: NodeMode,\n        items: Items,\n        stdlib_allow: Set[str],",
		"detail": "@n8n.task-runner-python.src.task_executor",
		"documentation": {}
	},
	{
		"label": "PrintArgs",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.src.task_executor",
		"description": "@n8n.task-runner-python.src.task_executor",
		"peekOfCode": "PrintArgs = list[list[Any]]  # Args to all `print()` calls in a Python code task\nclass TaskExecutor:\n    \"\"\"Responsible for executing Python code tasks in isolated subprocesses.\"\"\"\n    @staticmethod\n    def create_process(\n        code: str,\n        node_mode: NodeMode,\n        items: Items,\n        stdlib_allow: Set[str],\n        external_allow: Set[str],",
		"detail": "@n8n.task-runner-python.src.task_executor",
		"documentation": {}
	},
	{
		"label": "TaskOffer",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_runner",
		"description": "@n8n.task-runner-python.src.task_runner",
		"peekOfCode": "class TaskOffer:\n    def __init__(self, offer_id: str, valid_until: float):\n        self.offer_id = offer_id\n        self.valid_until = valid_until\n    @property\n    def has_expired(self) -> bool:\n        return time.time() > self.valid_until\nclass TaskRunner:\n    def __init__(\n        self,",
		"detail": "@n8n.task-runner-python.src.task_runner",
		"documentation": {}
	},
	{
		"label": "TaskRunner",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_runner",
		"description": "@n8n.task-runner-python.src.task_runner",
		"peekOfCode": "class TaskRunner:\n    def __init__(\n        self,\n        config: TaskRunnerConfig,\n    ):\n        self.runner_id = nanoid()\n        self.name = RUNNER_NAME\n        self.config = config\n        self.websocket_connection: Optional[Any] = None\n        self.can_send_offers = False",
		"detail": "@n8n.task-runner-python.src.task_runner",
		"documentation": {}
	},
	{
		"label": "TaskStatus",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_state",
		"description": "@n8n.task-runner-python.src.task_state",
		"peekOfCode": "class TaskStatus(Enum):\n    WAITING_FOR_SETTINGS = \"waiting_for_settings\"\n    RUNNING = \"running\"\n    ABORTING = \"aborting\"\n@dataclass\nclass TaskState:\n    task_id: str\n    status: TaskStatus\n    process: Optional[ForkServerProcess] = None\n    workflow_name: Optional[str] = None",
		"detail": "@n8n.task-runner-python.src.task_state",
		"documentation": {}
	},
	{
		"label": "TaskState",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.src.task_state",
		"description": "@n8n.task-runner-python.src.task_state",
		"peekOfCode": "class TaskState:\n    task_id: str\n    status: TaskStatus\n    process: Optional[ForkServerProcess] = None\n    workflow_name: Optional[str] = None\n    workflow_id: Optional[str] = None\n    node_name: Optional[str] = None\n    node_id: Optional[str] = None\n    def __init__(self, task_id: str):\n        self.task_id = task_id",
		"detail": "@n8n.task-runner-python.src.task_state",
		"documentation": {}
	},
	{
		"label": "ActiveTask",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"description": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"peekOfCode": "class ActiveTask:\n    settings: TaskSettings\nclass LocalTaskBroker:\n    def __init__(self):\n        self.port = LOCAL_TASK_BROKER_PORT\n        self.app = web.Application()\n        self.runner: web.AppRunner | None = None\n        self.site: web.TCPSite | None = None\n        self.connections: dict[str, web_ws.WebSocketResponse] = {}\n        self.pending_messages: dict[str, asyncio.Queue[WebsocketMessage]] = {}",
		"detail": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "LocalTaskBroker",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"description": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"peekOfCode": "class LocalTaskBroker:\n    def __init__(self):\n        self.port = LOCAL_TASK_BROKER_PORT\n        self.app = web.Application()\n        self.runner: web.AppRunner | None = None\n        self.site: web.TCPSite | None = None\n        self.connections: dict[str, web_ws.WebSocketResponse] = {}\n        self.pending_messages: dict[str, asyncio.Queue[WebsocketMessage]] = {}\n        self.received_messages: list[WebsocketMessage] = []\n        self.active_tasks: dict[TaskId, ActiveTask] = {}",
		"detail": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "TaskId",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"description": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"peekOfCode": "TaskId = str\nTaskSettings = dict[str, Any]\nWebsocketMessage = dict[str, Any]\n@dataclass\nclass ActiveTask:\n    settings: TaskSettings\nclass LocalTaskBroker:\n    def __init__(self):\n        self.port = LOCAL_TASK_BROKER_PORT\n        self.app = web.Application()",
		"detail": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "TaskSettings",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"description": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"peekOfCode": "TaskSettings = dict[str, Any]\nWebsocketMessage = dict[str, Any]\n@dataclass\nclass ActiveTask:\n    settings: TaskSettings\nclass LocalTaskBroker:\n    def __init__(self):\n        self.port = LOCAL_TASK_BROKER_PORT\n        self.app = web.Application()\n        self.runner: web.AppRunner | None = None",
		"detail": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "WebsocketMessage",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"description": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"peekOfCode": "WebsocketMessage = dict[str, Any]\n@dataclass\nclass ActiveTask:\n    settings: TaskSettings\nclass LocalTaskBroker:\n    def __init__(self):\n        self.port = LOCAL_TASK_BROKER_PORT\n        self.app = web.Application()\n        self.runner: web.AppRunner | None = None\n        self.site: web.TCPSite | None = None",
		"detail": "@n8n.task-runner-python.tests.fixtures.local_task_broker",
		"documentation": {}
	},
	{
		"label": "TaskRunnerManager",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.fixtures.task_runner_manager",
		"description": "@n8n.task-runner-python.tests.fixtures.task_runner_manager",
		"peekOfCode": "class TaskRunnerManager:\n    \"\"\"Responsible for managing the lifecycle of a task runner subprocess.\"\"\"\n    def __init__(\n        self,\n        task_broker_url: str = LOCAL_TASK_BROKER_URL,\n        graceful_shutdown_timeout: float | None = None,\n    ):\n        self.task_broker_url = task_broker_url\n        self.graceful_shutdown_timeout = graceful_shutdown_timeout\n        self.subprocess: asyncio.subprocess.Process | None = None",
		"detail": "@n8n.task-runner-python.tests.fixtures.task_runner_manager",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_PORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "LOCAL_TASK_BROKER_PORT = 8080\nLOCAL_TASK_BROKER_URL = f\"http://localhost:{LOCAL_TASK_BROKER_PORT}\"\nLOCAL_TASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Timing\nTASK_RESPONSE_WAIT = 3\nTASK_TIMEOUT = 2\nGRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_URL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "LOCAL_TASK_BROKER_URL = f\"http://localhost:{LOCAL_TASK_BROKER_PORT}\"\nLOCAL_TASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Timing\nTASK_RESPONSE_WAIT = 3\nTASK_TIMEOUT = 2\nGRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "LOCAL_TASK_BROKER_WS_PATH",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "LOCAL_TASK_BROKER_WS_PATH = \"/runners/_ws\"\n# Timing\nTASK_RESPONSE_WAIT = 3\nTASK_TIMEOUT = 2\nGRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "TASK_RESPONSE_WAIT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "TASK_RESPONSE_WAIT = 3\nTASK_TIMEOUT = 2\nGRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "TASK_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "TASK_TIMEOUT = 2\nGRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "GRACEFUL_SHUTDOWN_TIMEOUT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "GRACEFUL_SHUTDOWN_TIMEOUT = 1\n# Health check\nHEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "HEALTH_CHECK_PORT",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "HEALTH_CHECK_PORT = 5679\nHEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "HEALTH_CHECK_URL",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"description": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"peekOfCode": "HEALTH_CHECK_URL = f\"http://localhost:{HEALTH_CHECK_PORT}\"",
		"detail": "@n8n.task-runner-python.tests.fixtures.test_constants",
		"documentation": {}
	},
	{
		"label": "create_task_settings",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.tests.integration.conftest",
		"description": "@n8n.task-runner-python.tests.integration.conftest",
		"peekOfCode": "def create_task_settings(\n    code: str,\n    node_mode: str,\n    items: Items | None = None,\n    continue_on_fail: bool = False,\n    can_log: bool = False,\n):\n    return {\n        \"code\": code,\n        \"nodeMode\": NODE_MODE_TO_BROKER_STYLE[node_mode],",
		"detail": "@n8n.task-runner-python.tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "get_browser_console_msgs",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.tests.integration.conftest",
		"description": "@n8n.task-runner-python.tests.integration.conftest",
		"peekOfCode": "def get_browser_console_msgs(broker: LocalTaskBroker, task_id: str) -> list[list[str]]:\n    console_msgs = []\n    for msg in broker.get_task_rpc_messages(task_id):\n        if msg.get(\"method\") == \"logNodeOutput\":\n            console_msgs.append(msg.get(\"params\", []))\n    return console_msgs",
		"detail": "@n8n.task-runner-python.tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "NODE_MODE_TO_BROKER_STYLE",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.integration.conftest",
		"description": "@n8n.task-runner-python.tests.integration.conftest",
		"peekOfCode": "NODE_MODE_TO_BROKER_STYLE = {v: k for k, v in NODE_MODE_MAP.items()}\n@pytest_asyncio.fixture\nasync def manager():\n    manager = TaskRunnerManager()\n    await manager.start()\n    yield manager\n    await manager.stop()\n@pytest_asyncio.fixture\nasync def broker():\n    broker = LocalTaskBroker()",
		"detail": "@n8n.task-runner-python.tests.integration.conftest",
		"documentation": {}
	},
	{
		"label": "TestTaskRunnerSentry",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_sentry",
		"description": "@n8n.task-runner-python.tests.unit.test_sentry",
		"peekOfCode": "class TestTaskRunnerSentry:\n    def test_init_configures_sentry_correctly(self, sentry_config):\n        with (\n            patch(\"sentry_sdk.init\") as mock_init,\n            patch(\"sentry_sdk.set_tag\") as mock_set_tag,\n            patch(\"sentry_sdk.integrations.logging.LoggingIntegration\") as mock_logging,\n        ):\n            mock_logging_instance = Mock()\n            mock_logging.return_value = mock_logging_instance\n            sentry = TaskRunnerSentry(sentry_config)",
		"detail": "@n8n.task-runner-python.tests.unit.test_sentry",
		"documentation": {}
	},
	{
		"label": "TestSetupSentry",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_sentry",
		"description": "@n8n.task-runner-python.tests.unit.test_sentry",
		"peekOfCode": "class TestSetupSentry:\n    def test_returns_none_when_disabled(self, disabled_sentry_config):\n        result = setup_sentry(disabled_sentry_config)\n        assert result is None\n    @patch(\"src.sentry.TaskRunnerSentry\")\n    def test_initializes_sentry_when_enabled(self, mock_sentry_class, sentry_config):\n        mock_sentry = Mock()\n        mock_sentry_class.return_value = mock_sentry\n        result = setup_sentry(sentry_config)\n        mock_sentry_class.assert_called_once_with(sentry_config)",
		"detail": "@n8n.task-runner-python.tests.unit.test_sentry",
		"documentation": {}
	},
	{
		"label": "TestSentryConfig",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_sentry",
		"description": "@n8n.task-runner-python.tests.unit.test_sentry",
		"peekOfCode": "class TestSentryConfig:\n    def test_enabled_returns_true_with_dsn(self, sentry_config):\n        assert sentry_config.enabled is True\n    def test_enabled_returns_false_without_dsn(self, disabled_sentry_config):\n        assert disabled_sentry_config.enabled is False\n    @patch.dict(\n        \"os.environ\",\n        {\n            \"N8N_SENTRY_DSN\": \"https://test@sentry.io/789\",\n            \"N8N_VERSION\": \"2.0.0\",",
		"detail": "@n8n.task-runner-python.tests.unit.test_sentry",
		"documentation": {}
	},
	{
		"label": "sentry_config",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.tests.unit.test_sentry",
		"description": "@n8n.task-runner-python.tests.unit.test_sentry",
		"peekOfCode": "def sentry_config():\n    return SentryConfig(\n        dsn=\"https://test@sentry.io/123456\",\n        n8n_version=\"1.0.0\",\n        environment=\"test\",\n        deployment_name=\"test-deployment\",\n    )\n@pytest.fixture\ndef disabled_sentry_config():\n    return SentryConfig(",
		"detail": "@n8n.task-runner-python.tests.unit.test_sentry",
		"documentation": {}
	},
	{
		"label": "disabled_sentry_config",
		"kind": 2,
		"importPath": "@n8n.task-runner-python.tests.unit.test_sentry",
		"description": "@n8n.task-runner-python.tests.unit.test_sentry",
		"peekOfCode": "def disabled_sentry_config():\n    return SentryConfig(\n        dsn=\"\",\n        n8n_version=\"1.0.0\",\n        environment=\"test\",\n        deployment_name=\"test-deployment\",\n    )\nclass TestTaskRunnerSentry:\n    def test_init_configures_sentry_correctly(self, sentry_config):\n        with (",
		"detail": "@n8n.task-runner-python.tests.unit.test_sentry",
		"documentation": {}
	},
	{
		"label": "TestTaskAnalyzer",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class TestTaskAnalyzer:\n    @pytest.fixture\n    def analyzer(self) -> TaskAnalyzer:\n        return TaskAnalyzer(\n            stdlib_allow={\n                \"json\",\n                \"math\",\n                \"re\",\n                \"datetime\",\n                \"random\",",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "TestImportValidation",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class TestImportValidation(TestTaskAnalyzer):\n    def test_allowed_standard_imports(self, analyzer: TaskAnalyzer) -> None:\n        valid_imports = [\n            \"import json\",\n            \"import math\",\n            \"from datetime import datetime\",\n            \"from collections import Counter\",\n            \"import re as regex\",\n            \"from itertools import chain, cycle\",\n            \"from math import *\",",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "TestAttributeAccessValidation",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class TestAttributeAccessValidation(TestTaskAnalyzer):\n    def test_always_blocked_attributes(self, analyzer: TaskAnalyzer) -> None:\n        blocked_attributes = [\n            \"obj.__subclasses__\",\n            \"obj.__globals__\",\n            \"obj.__builtins__\",\n            \"obj.__traceback__\",\n            \"obj.tb_frame\",\n        ]\n        for code in blocked_attributes:",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "MyClass",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class MyClass:\n    def __init__(self):\n        self.value = 42\nobj = MyClass()\nresult = obj.__class__.__name__\n\"\"\"\n        analyzer.validate(safe_code)\nclass TestDynamicImportDetection(TestTaskAnalyzer):\n    def test_various_dynamic_import_patterns(self, analyzer: TaskAnalyzer) -> None:\n        disallowed_dynamic_imports = [",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "TestDynamicImportDetection",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class TestDynamicImportDetection(TestTaskAnalyzer):\n    def test_various_dynamic_import_patterns(self, analyzer: TaskAnalyzer) -> None:\n        disallowed_dynamic_imports = [\n            \"__import__('os')\",\n            \"import builtins; builtins.__import__('sys')\",\n            \"module_name = 'subprocess'; __import__(module_name)\",\n        ]\n        for code in disallowed_dynamic_imports:\n            with pytest.raises(SecurityViolationError):\n                analyzer.validate(code)",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "TestAllowAll",
		"kind": 6,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "class TestAllowAll(TestTaskAnalyzer):\n    def test_allow_all_bypasses_validation(self) -> None:\n        analyzer = TaskAnalyzer(stdlib_allow={\"*\"}, external_allow={\"*\"})\n        unsafe_allowed_code = [\n            \"import os\",\n            \"import sys\",\n            \"__import__('subprocess')\",\n            \"obj.__subclasses__\",\n            \"from . import relative\",\n        ]",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "obj",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "obj = MyClass()\nresult = obj.__class__.__name__\n\"\"\"\n        analyzer.validate(safe_code)\nclass TestDynamicImportDetection(TestTaskAnalyzer):\n    def test_various_dynamic_import_patterns(self, analyzer: TaskAnalyzer) -> None:\n        disallowed_dynamic_imports = [\n            \"__import__('os')\",\n            \"import builtins; builtins.__import__('sys')\",\n            \"module_name = 'subprocess'; __import__(module_name)\",",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "result",
		"kind": 5,
		"importPath": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"description": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"peekOfCode": "result = obj.__class__.__name__\n\"\"\"\n        analyzer.validate(safe_code)\nclass TestDynamicImportDetection(TestTaskAnalyzer):\n    def test_various_dynamic_import_patterns(self, analyzer: TaskAnalyzer) -> None:\n        disallowed_dynamic_imports = [\n            \"__import__('os')\",\n            \"import builtins; builtins.__import__('sys')\",\n            \"module_name = 'subprocess'; __import__(module_name)\",\n        ]",
		"detail": "@n8n.task-runner-python.tests.unit.test_task_analyzer",
		"documentation": {}
	},
	{
		"label": "is_git_repo",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():\n    sys.exit(",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_pull",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_pull(git_dir=args.repo_dir):\n    return subprocess.run(\n        [\"git\", \"pull\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\ngit_pull()\ndef git_branch(git_dir=args.repo_dir):",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_branch",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_branch(git_dir=args.repo_dir):\n    branch = subprocess.run(\n        [\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\n    return branch.strip()\ndef parse_aliases(lines):",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_aliases",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_aliases(lines):\n    aliases = {}\n    for line in lines:\n        if OPTS_START in line:\n            break\n    for line in lines:\n        line = line.strip()\n        if line.endswith(OPTS_END):\n            break\n        if not line.strip().startswith(\"{\"):",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "fill_out_aliases",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def fill_out_aliases(aliases, add_no_options=True, assumptions=set()):\n    # If both --option and --other-option have \"oO\" (for example) as their `letter`,\n    # add a \"name\" property with the main option's `lname`\n    letter_count = Counter(a[\"letter\"] for a in aliases)\n    # \"ARB_BOOL\"-type OPTIONs have a --no-OPTION counterpart\n    no_aliases = []\n    for idx, alias in enumerate(aliases):\n        if alias[\"type\"] == \"true\":\n            alias[\"type\"] = \"string\"\n        if alias[\"type\"] == \"false\":",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "split",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def split(aliases):\n    long_args = {}\n    short_args = {}\n    for alias in aliases:\n        if alias[\"lname\"] in long_args:\n            raise ValueError(f\"duplicate lname: {alias['lname']!r}\")\n        long_args[alias[\"lname\"]] = {\n            k: v for k, v in alias.items() if k not in [\"letter\", \"lname\"]\n        }\n        if len(alias[\"letter\"]) == 1:",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "format_as_js",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def format_as_js(d, indent=\"  \", indent_level=0):\n    for top_key, opt in d.items():\n        def quote(key):\n            return json.dumps(key, ensure_ascii=False)\n        def val_to_js(val):\n            if isinstance(val, str):\n                return quote(val)\n            if isinstance(val, bool):\n                return str(val).lower()\n            raise TypeError(f\"can't convert values of type {type(val)} to JS\")",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_tag",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_tag(tag):\n    if not tag.startswith(\"curl-\") or tag.startswith(\"curl_\"):\n        return None\n    version = tag.removeprefix(\"curl-\").removeprefix(\"curl_\")\n    version, *extra = version.split(\"-\", 1)\n    extra = extra[0] if extra else \"\"\n    major, minor, *patch = version.split(\"_\", 2)\n    if len(patch) > 1:\n        raise ValueError(f\"unknown patch version {patch} from tag {tag}\")\n    patch = patch[0] if patch else \"0\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "curl_tags",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def curl_tags(git_dir=args.repo_dir):\n    tags = (\n        subprocess.run(\n            [\"git\", \"tag\"],\n            cwd=git_dir,\n            check=True,\n            capture_output=True,\n            text=True,\n        )\n        .stdout.strip()",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "file_at_commit",
		"kind": 2,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def file_at_commit(filename, commit_hash, git_dir=args.repo_dir):\n    contents = subprocess.run(\n        [\"git\", \"cat-file\", \"-p\", f\"{commit_hash}:{filename}\"],\n        cwd=git_dir,\n        capture_output=True,\n        check=True,\n    ).stdout\n    try:\n        contents = contents.decode(\"utf-8\")\n    except UnicodeDecodeError:",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CURL_REPO",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CURL_REPO = Path(__file__).parent.parent / \"curl\"\nOLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OLD_INPUT_FILE",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NEW_INPUT_FILE",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "FILE_MOVED_TAG",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "FILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NO_OPTIONS_TAG",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a\n# --no-OPTION counterpart, so a new ARG_NONE type was added for those in\n# 913c3c8f5476bd7bc4d8d00509396bd4b525b8fc\nOPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_START",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_END",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "BOOL_TYPES",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "BOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "STR_TYPES",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "STR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "ALIAS_TYPES",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "ALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "RAW_ALIAS_TYPES",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "RAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OUTPUT_FILE",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_START",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_END",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_START",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_END",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "PACKAGE_JSON",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "PACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_FILE",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_VERSION_LINE_START",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "DUPES",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "DUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.\n    \"http-request\": \"request\",\n    \"ftp-ascii\": \"use-ascii\",\n    \"ftpport\": \"ftp-port\",",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parser",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "parser = argparse.ArgumentParser(\n    prog=\"extract_curl_args\",\n    description=\"extract a list of curl's arguments from its source code into a JavaScript file\",\n)\nparser.add_argument(\"repo_dir\", nargs=\"?\", default=CURL_REPO, type=Path)\nparser.add_argument(\n    \"-w\",\n    \"--write\",\n    action=\"store_true\",\n    help=\"write changes to \" + str(OUTPUT_FILE) + \" and \" + str(CLI_FILE),",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "args",
		"kind": 5,
		"importPath": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "args = parser.parse_args()\ndef is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():",
		"detail": "cli.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "is_git_repo",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():\n    sys.exit(",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_pull",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_pull(git_dir=args.repo_dir):\n    return subprocess.run(\n        [\"git\", \"pull\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\ngit_pull()\ndef git_branch(git_dir=args.repo_dir):",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_branch",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_branch(git_dir=args.repo_dir):\n    branch = subprocess.run(\n        [\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\n    return branch.strip()\ndef parse_aliases(lines):",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_aliases",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_aliases(lines):\n    aliases = {}\n    for line in lines:\n        if OPTS_START in line:\n            break\n    for line in lines:\n        line = line.strip()\n        if line.endswith(OPTS_END):\n            break\n        if not line.strip().startswith(\"{\"):",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "fill_out_aliases",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def fill_out_aliases(aliases, add_no_options=True, assumptions=set()):\n    # If both --option and --other-option have \"oO\" (for example) as their `letter`,\n    # add a \"name\" property with the main option's `lname`\n    letter_count = Counter(a[\"letter\"] for a in aliases)\n    # \"ARB_BOOL\"-type OPTIONs have a --no-OPTION counterpart\n    no_aliases = []\n    for idx, alias in enumerate(aliases):\n        if alias[\"type\"] == \"true\":\n            alias[\"type\"] = \"string\"\n        if alias[\"type\"] == \"false\":",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "split",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def split(aliases):\n    long_args = {}\n    short_args = {}\n    for alias in aliases:\n        if alias[\"lname\"] in long_args:\n            raise ValueError(f\"duplicate lname: {alias['lname']!r}\")\n        long_args[alias[\"lname\"]] = {\n            k: v for k, v in alias.items() if k not in [\"letter\", \"lname\"]\n        }\n        if len(alias[\"letter\"]) == 1:",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "format_as_js",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def format_as_js(d, indent=\"  \", indent_level=0):\n    for top_key, opt in d.items():\n        def quote(key):\n            return json.dumps(key, ensure_ascii=False)\n        def val_to_js(val):\n            if isinstance(val, str):\n                return quote(val)\n            if isinstance(val, bool):\n                return str(val).lower()\n            raise TypeError(f\"can't convert values of type {type(val)} to JS\")",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_tag",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_tag(tag):\n    if not tag.startswith(\"curl-\") or tag.startswith(\"curl_\"):\n        return None\n    version = tag.removeprefix(\"curl-\").removeprefix(\"curl_\")\n    version, *extra = version.split(\"-\", 1)\n    extra = extra[0] if extra else \"\"\n    major, minor, *patch = version.split(\"_\", 2)\n    if len(patch) > 1:\n        raise ValueError(f\"unknown patch version {patch} from tag {tag}\")\n    patch = patch[0] if patch else \"0\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "curl_tags",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def curl_tags(git_dir=args.repo_dir):\n    tags = (\n        subprocess.run(\n            [\"git\", \"tag\"],\n            cwd=git_dir,\n            check=True,\n            capture_output=True,\n            text=True,\n        )\n        .stdout.strip()",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "file_at_commit",
		"kind": 2,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def file_at_commit(filename, commit_hash, git_dir=args.repo_dir):\n    contents = subprocess.run(\n        [\"git\", \"cat-file\", \"-p\", f\"{commit_hash}:{filename}\"],\n        cwd=git_dir,\n        capture_output=True,\n        check=True,\n    ).stdout\n    try:\n        contents = contents.decode(\"utf-8\")\n    except UnicodeDecodeError:",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CURL_REPO",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CURL_REPO = Path(__file__).parent.parent / \"curl\"\nOLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OLD_INPUT_FILE",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NEW_INPUT_FILE",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "FILE_MOVED_TAG",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "FILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NO_OPTIONS_TAG",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a\n# --no-OPTION counterpart, so a new ARG_NONE type was added for those in\n# 913c3c8f5476bd7bc4d8d00509396bd4b525b8fc\nOPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_START",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_END",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "BOOL_TYPES",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "BOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "STR_TYPES",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "STR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "ALIAS_TYPES",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "ALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "RAW_ALIAS_TYPES",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "RAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OUTPUT_FILE",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_START",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_END",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_START",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_END",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "PACKAGE_JSON",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "PACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_FILE",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_VERSION_LINE_START",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "DUPES",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "DUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.\n    \"http-request\": \"request\",\n    \"ftp-ascii\": \"use-ascii\",\n    \"ftpport\": \"ftp-port\",",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parser",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "parser = argparse.ArgumentParser(\n    prog=\"extract_curl_args\",\n    description=\"extract a list of curl's arguments from its source code into a JavaScript file\",\n)\nparser.add_argument(\"repo_dir\", nargs=\"?\", default=CURL_REPO, type=Path)\nparser.add_argument(\n    \"-w\",\n    \"--write\",\n    action=\"store_true\",\n    help=\"write changes to \" + str(OUTPUT_FILE) + \" and \" + str(CLI_FILE),",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "args",
		"kind": 5,
		"importPath": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "args = parser.parse_args()\ndef is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():",
		"detail": "frontend.editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "is_git_repo",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():\n    sys.exit(",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_pull",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_pull(git_dir=args.repo_dir):\n    return subprocess.run(\n        [\"git\", \"pull\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\ngit_pull()\ndef git_branch(git_dir=args.repo_dir):",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "git_branch",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def git_branch(git_dir=args.repo_dir):\n    branch = subprocess.run(\n        [\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n        cwd=git_dir,\n        check=True,\n        capture_output=True,\n        text=True,\n    ).stdout\n    return branch.strip()\ndef parse_aliases(lines):",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_aliases",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_aliases(lines):\n    aliases = {}\n    for line in lines:\n        if OPTS_START in line:\n            break\n    for line in lines:\n        line = line.strip()\n        if line.endswith(OPTS_END):\n            break\n        if not line.strip().startswith(\"{\"):",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "fill_out_aliases",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def fill_out_aliases(aliases, add_no_options=True, assumptions=set()):\n    # If both --option and --other-option have \"oO\" (for example) as their `letter`,\n    # add a \"name\" property with the main option's `lname`\n    letter_count = Counter(a[\"letter\"] for a in aliases)\n    # \"ARB_BOOL\"-type OPTIONs have a --no-OPTION counterpart\n    no_aliases = []\n    for idx, alias in enumerate(aliases):\n        if alias[\"type\"] == \"true\":\n            alias[\"type\"] = \"string\"\n        if alias[\"type\"] == \"false\":",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "split",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def split(aliases):\n    long_args = {}\n    short_args = {}\n    for alias in aliases:\n        if alias[\"lname\"] in long_args:\n            raise ValueError(f\"duplicate lname: {alias['lname']!r}\")\n        long_args[alias[\"lname\"]] = {\n            k: v for k, v in alias.items() if k not in [\"letter\", \"lname\"]\n        }\n        if len(alias[\"letter\"]) == 1:",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "format_as_js",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def format_as_js(d, indent=\"  \", indent_level=0):\n    for top_key, opt in d.items():\n        def quote(key):\n            return json.dumps(key, ensure_ascii=False)\n        def val_to_js(val):\n            if isinstance(val, str):\n                return quote(val)\n            if isinstance(val, bool):\n                return str(val).lower()\n            raise TypeError(f\"can't convert values of type {type(val)} to JS\")",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parse_tag",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def parse_tag(tag):\n    if not tag.startswith(\"curl-\") or tag.startswith(\"curl_\"):\n        return None\n    version = tag.removeprefix(\"curl-\").removeprefix(\"curl_\")\n    version, *extra = version.split(\"-\", 1)\n    extra = extra[0] if extra else \"\"\n    major, minor, *patch = version.split(\"_\", 2)\n    if len(patch) > 1:\n        raise ValueError(f\"unknown patch version {patch} from tag {tag}\")\n    patch = patch[0] if patch else \"0\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "curl_tags",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def curl_tags(git_dir=args.repo_dir):\n    tags = (\n        subprocess.run(\n            [\"git\", \"tag\"],\n            cwd=git_dir,\n            check=True,\n            capture_output=True,\n            text=True,\n        )\n        .stdout.strip()",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "file_at_commit",
		"kind": 2,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "def file_at_commit(filename, commit_hash, git_dir=args.repo_dir):\n    contents = subprocess.run(\n        [\"git\", \"cat-file\", \"-p\", f\"{commit_hash}:{filename}\"],\n        cwd=git_dir,\n        capture_output=True,\n        check=True,\n    ).stdout\n    try:\n        contents = contents.decode(\"utf-8\")\n    except UnicodeDecodeError:",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CURL_REPO",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CURL_REPO = Path(__file__).parent.parent / \"curl\"\nOLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OLD_INPUT_FILE",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OLD_INPUT_FILE = CURL_REPO / \"src\" / \"main.c\"\nNEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NEW_INPUT_FILE",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NEW_INPUT_FILE = CURL_REPO / \"src\" / \"tool_getparam.c\"\nFILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "FILE_MOVED_TAG",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "FILE_MOVED_TAG = \"curl-7_23_0\"  # when the above change happened\n# Originally there were only two arg \"types\": TRUE/FALSE which signified\n# whether the option expected a value or was a boolean, respectively.\n# Then in\n# 5abfdc0140df0977b02506d16796f616158bfe88\n# which was released as\nNO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "NO_OPTIONS_TAG",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "NO_OPTIONS_TAG = \"curl-7_19_0\"\n# all boolean (i.e. FALSE \"type\") options got an implicit --no-OPTION.\n# Then TRUE/FALSE was changed to ARG_STRING/ARG_BOOL.\n# Then it was realized that not all boolean options should have a\n# --no-OPTION counterpart, so a new ARG_NONE type was added for those in\n# 913c3c8f5476bd7bc4d8d00509396bd4b525b8fc\nOPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_START",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_START = \"struct LongShort aliases[]= {\"\nOPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OPTS_END",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OPTS_END = \"};\"\nBOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "BOOL_TYPES",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "BOOL_TYPES = [\"bool\", \"none\"]\nSTR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "STR_TYPES",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "STR_TYPES = [\"string\", \"filename\"]\nALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "ALIAS_TYPES",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "ALIAS_TYPES = BOOL_TYPES + STR_TYPES\nRAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "RAW_ALIAS_TYPES",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "RAW_ALIAS_TYPES = ALIAS_TYPES + [\"true\", \"false\"]\nOUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "OUTPUT_FILE",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "OUTPUT_FILE = Path(__file__).parent.parent / \"src\" / \"curl\" / \"opts.ts\"\nJS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_START",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_START = \"BEGIN EXTRACTED OPTIONS\"\nJS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_PARAMS_END",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_PARAMS_END = \"END EXTRACTED OPTIONS\"\nJS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_START",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_START = \"BEGIN EXTRACTED SHORT OPTIONS\"\nJS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "JS_SHORT_PARAMS_END",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "JS_SHORT_PARAMS_END = \"END EXTRACTED SHORT OPTIONS\"\nPACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "PACKAGE_JSON",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "PACKAGE_JSON = Path(__file__).parent.parent / \"package.json\"\nCLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_FILE",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_FILE = Path(__file__).parent.parent / \"src\" / \"cli.ts\"\nCLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "CLI_VERSION_LINE_START",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "CLI_VERSION_LINE_START = \"const VERSION = \"\n# These are options with the same `letter`, which are options that were\n# renamed, along with their new name.\nDUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "DUPES",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "DUPES = {\n    \"krb4\": \"krb\",\n    \"ftp-ssl\": \"ssl\",\n    \"ftp-ssl-reqd\": \"ssl-reqd\",\n    \"socks5-gssapi-service\": \"proxy-service-name\",\n    # These argument names have been deleted,\n    # they should appear as deleted options.\n    \"http-request\": \"request\",\n    \"ftp-ascii\": \"use-ascii\",\n    \"ftpport\": \"ftp-port\",",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "parser",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "parser = argparse.ArgumentParser(\n    prog=\"extract_curl_args\",\n    description=\"extract a list of curl's arguments from its source code into a JavaScript file\",\n)\nparser.add_argument(\"repo_dir\", nargs=\"?\", default=CURL_REPO, type=Path)\nparser.add_argument(\n    \"-w\",\n    \"--write\",\n    action=\"store_true\",\n    help=\"write changes to \" + str(OUTPUT_FILE) + \" and \" + str(CLI_FILE),",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	},
	{
		"label": "args",
		"kind": 5,
		"importPath": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"description": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"peekOfCode": "args = parser.parse_args()\ndef is_git_repo(git_dir=args.repo_dir):\n    result = subprocess.run(\n        [\"git\", \"rev-parse\", \"--is-inside-work-tree\"],\n        cwd=git_dir,\n        capture_output=True,\n        text=True,\n    )\n    return result.returncode == 0 and result.stdout.strip() == \"true\"\nif not OUTPUT_FILE.is_file():",
		"detail": "testing.playwright.node_modules.n8n.node_modules.n8n-editor-ui.node_modules.curlconverter.tools.extract_curl_args",
		"documentation": {}
	}
]
